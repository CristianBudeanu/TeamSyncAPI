// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamSync.Infrastructure.EF.Contexts;

#nullable disable

namespace TeamSync.Infrastructure.Migrations
{
    [DbContext(typeof(TeamSyncAppContext))]
    [Migration("20250409073126_chat storage")]
    partial class chatstorage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembersId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ChatEntities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("From")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.GithubEntities.GithubRepository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepositoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("GithubRepositories");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Invitations", (string)null);
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.ProjectRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a92fe5a-a9b1-475f-9b87-0ff77225aaf5"),
                            ProjectRoleName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("2dbf4035-46bb-4e49-a95e-a368809c14bc"),
                            ProjectRoleName = "Member"
                        });
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.ProjectUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProjectId", "ProjectRoleId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("ProjectUserRole");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleName = "User"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.TaskStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36050345-8e45-46a8-9cd2-15b522b9df7b"),
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = new Guid("c09440d1-28d6-4297-b779-d60ada25f304"),
                            StatusName = "InWork"
                        },
                        new
                        {
                            Id = new Guid("e975ae0e-9c2a-4084-8fb1-52ef3a0d08d3"),
                            StatusName = "Done"
                        },
                        new
                        {
                            Id = new Guid("f6a303ff-67d2-4cb1-9de4-eb268fc503b5"),
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "cristian.budeanu02@gmail.com",
                            PassHash = "bLJvnAQ9vt72eCQkkRpdj6Cok6kRjqdJH1GYR19FjnU=",
                            PassSalt = "C4F05POfmvkLjjolBSCiGw==",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ChatEntities.ChatMessage", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.GithubEntities.GithubRepository", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.Project", "Project")
                        .WithOne("GithubRepository")
                        .HasForeignKey("TeamSync.Domain.Entities.GithubEntities.GithubRepository", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.Project", "Project")
                        .WithOne("Invitation")
                        .HasForeignKey("TeamSync.Domain.Entities.Invitation", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.ProjectUserRole", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.Project", "Project")
                        .WithMany("ProjectUserRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.ProjectRole", "ProjectRole")
                        .WithMany("ProjectUserRoles")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.User", "User")
                        .WithMany("ProjectUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.TaskItem", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.User", "AssignedUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.ProjectEntities.Project", "Project")
                        .WithMany("TaskItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSync.Domain.Entities.TaskEntities.TaskStatus", "Status")
                        .WithMany("TaskItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatorUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.User", b =>
                {
                    b.HasOne("TeamSync.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.Project", b =>
                {
                    b.Navigation("GithubRepository");

                    b.Navigation("Invitation");

                    b.Navigation("ProjectUserRoles");

                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.ProjectEntities.ProjectRole", b =>
                {
                    b.Navigation("ProjectUserRoles");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.TaskStatus", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("TeamSync.Domain.Entities.TaskEntities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ProjectUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
